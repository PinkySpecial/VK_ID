import requests
import networkx as nx
import plotly.graph_objects as go
import time
import collections
import matplotlib.pyplot as plt
import numpy as np

# Ваш access token для VK API
access_token = 'Ваш токен'

# ID пользователя, чьих друзей Вы хотите получить
user_id = '224364474'

# Функция для получения списка друзей пользователя
def get_friends(user_id):
    api_url = f'https://api.vk.com/method/friends.get?user_id={user_id}&count=1000&access_token={access_token}&v=5.131'
    response = requests.get(api_url)
    friends_data = response.json()
    if 'error' in friends_data:
        print(f"Ошибка: {friends_data['error']['error_msg']}")
        return []
    else:
        return friends_data['response']['items']

# Функция для получения информации о друзьях
def get_friends_info(user_ids):
    api_url = f'https://api.vk.com/method/users.get?user_ids={",".join(map(str, user_ids))}&access_token={access_token}&v=5.131'
    response = requests.get(api_url)
    friends_info_data = response.json()
    if 'error' in friends_info_data:
        print(f"Ошибка: {friends_info_data['error']['error_msg']}")
        return []
    else:
        return friends_info_data['response']


# Функция для получения друзей друзей
def get_friends_of_friends(user_ids):
    i=0
    friends_of_friends = []
    for user_id in user_ids:
        i=i+1
        friends = get_friends(user_id)
        friends_of_friends.extend(friends)
        time.sleep(0.5)
    return friends_of_friends


# Функция для добавления в граф информации о пользователе, его друзьях и друзьях его друзей
def creator(user_id, graph,lag):
    # Добавление вершины для пользователя
    user_friends = get_friends(user_id)
    graph.add_node(user_id)
    # Добавление вершин друзей и рёбер между пользователем и его друзьями
    for friend_id in user_friends:
        graph.add_node(friend_id)
        graph.add_edge(user_id, friend_id)
    # Добавление вершин для друзей друзей и ребер между друзьями и их друзьями
    for friend_id in user_friends:
        fof_ids = get_friends(friend_id)  # list of friend ids for current friend (fofs)
        for fof_id in fof_ids:
            graph.add_node(fof_id)
            graph.add_edge(friend_id, fof_id)
        time.sleep(lag)





user_ids = ['224364474', '256804252', '212487510', '531619927', '194848002', '381907905', '444639273', '308412461', '308412461', '232210943', '75785096', '112370537', '236783753', '266095500', '383087847', '146697287', '315590903', '54705450', '139939428', '461814307', '143661083', '260727197', '276581495', '163067034', '184267947']


# Создание графа
G = nx.Graph()


for id in user_ids:
    creator(id,G,0.3)



# Расчет позиций вершин в круговом расположении
pos = nx.spring_layout(G)

# Создание графика Plotly
#fig = go.Figure()

# Добавление ребер в график
for edge in G.edges:

    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    plt.plot(np.array([x0, x1]), np.array([y0, y1]), 'ro-')
    #fig.add_trace(go.Scatter(x=[x0, x1], y=[y0, y1], mode='lines'))

# Добавление вершин в график
#for node in G.nodes:
   # x, y = pos[node]
    #fig.add_trace(go.Scatter(x=[x], y=[y], mode='markers', marker=dict(size=10), text=node, name=node))

# Добавление информации о количестве связей
#for node in G.nodes:
 #   x, y = pos[node]
  #  friends_count = len(list(G.neighbors(node)))
  #  fig.add_trace(go.Scatter(x=[x], y=[y], mode='markers', marker=dict(size=10), text=f"{node}\nКоличество связей: {friends_count}", name=node))

# Установка расположения и заголовка
#fig.update_layout(title='Граф друзей и их друзей')

# Группа идентификаторов для расчета центральностей
group_ids = ['224364474', '256804252', '212487510', '531619927', '194848002', '381907905', '444639273', '308412461', '308412461', '232210943', '75785096', '112370537', '236783753', '266095500', '383087847', '146697287', '315590903', '54705450', '139939428', '461814307', '143661083', '260727197', '276581495', '163067034', '184267947']

# Создание подграфа с вершинами только по группе
subgraph = G.subgraph(group_ids)

# Оценка центральности по посредничеству
betweenness_centrality = nx.betweenness_centrality(subgraph)
print("Центральность по посредничеству:")
print(betweenness_centrality)

# Оценка центральности по близости
closeness_centrality = nx.closeness_centrality(subgraph)
print("Центральность по близости:")
print(closeness_centrality)

# Оценка центральности по собственному вектору
eigenvector_centrality = nx.eigenvector_centrality(subgraph)
print("Центральность по собственному вектору:")
print(eigenvector_centrality)

plt.show()
